---
- name: KubeSphere | Create KubeSphere dir
  file:
    path: "{{ kubesphere_dir }}"
    state: directory
    mode: 0755


- name: KubeSphere | Getting installation init files
  copy:
    src: "{{ item }}"
    dest: "{{ kubesphere_dir }}/"
  loop:
    - "ks-init"

- import_tasks: ks-init.yaml


- name: KubeSphere | Getting controls-system file
  template:
    src: "{{ item.file }}.j2"
    dest: "{{ kubesphere_dir }}/{{ item.file }}"
  with_items:
    - { name: kubesphere-controls-system, file: kubesphere-controls-system.yaml }


- name: KubeSphere | Installing controls-system
  command: "{{ bin_dir }}/kubectl apply -f {{ kubesphere_dir }}/kubesphere-controls-system.yaml  -n kubesphere-controls-system"
  register: import
  failed_when: "import.stderr and 'AlreadyExists' not in import.stderr"


# - name: KubeSphere | Create KubeSphere vpa
#   shell: "{{ bin_dir }}/kubectl apply -f {{ kubesphere_dir }}/ks-init/ks-vpa.yaml"
#   register: result
#   until: result is succeeded
#   retries: 5
#   delay: 3
#   when:
#     - vertical_pod_autoscaler_enable == true

- name: KubeSphere | Generate kubeconfig-admin
  shell: >
    /bin/bash {{ kubesphere_dir }}/ks-init/generate-kubeconfig.sh
  when:
    - openpitrix.enabled is defined and openpitrix.enabled

# - name: Kubesphere | Checking kubesphere component
#   shell: >
#     {{ bin_dir }}/kubectl get deploy -n kubesphere-system
#   register: kubesphere_component_pod

# - name: Kubesphere | Get kubesphere component version
#   shell: >
#     {{ bin_dir }}/kubectl get deploy -n  kubesphere-system ks-console -o jsonpath='{.metadata.labels.version}'
#   register: console_version
#   when:
#     - kubesphere_component_pod.stdout.find("ks-console") != -1

# - import_tasks: ks-stop.yaml
#   when:
#     - console_version.stdout and console_version.stdout != ks_version
