---

- name: OpenPitrix | Delete old openpitrix
  shell: >
    {{ bin_dir }}/kubectl delete deploy -n openpitrix-system {{ item }}
  loop:
    - "openpitrix-api-gateway-deployment"
    - "openpitrix-app-manager-deployment"
    - "openpitrix-category-manager-deployment"
    - "openpitrix-cluster-manager-deployment"
    - "openpitrix-dashboard-deployment"
    - "openpitrix-iam-service-deployment"
    - "openpitrix-job-manager-deployment"
    - "openpitrix-pilot-deployment"
    - "openpitrix-repo-indexer-deployment"
    - "openpitrix-repo-manager-deployment"
    - "openpitrix-runtime-manager-deployment"
    - "openpitrix-task-manager-deployment"
  ignore_errors: True

- name: OpenPitrix | Getting OpenPitrix installation files
  copy:
    src: "openpitrix"
    dest: "{{ kubesphere_dir }}/"

- name: OpenPitrix | Getting OpenPitrix installation files
  template:
    src: "{{ item.file }}.j2"
    dest: "{{ kubesphere_dir }}/{{ item.path }}/{{ item.file }}"
  with_items:
    - { path: openpitrix, file: custom-values-openpitrix.yaml }
    - { path: openpitrix, file: openpitrix-release-app-job.yaml }
    - { path: openpitrix, file: hyperpitrix-generate-kubeconfig-job.yaml }

- name: OpenPitrix | Check OpenPitrix
  shell: >
    {{ bin_dir }}/helm list ks-openpitrix
  register: op_check
  ignore_errors: True


- name: OpenPitrix | Deploy OpenPitrix
  shell: >
    {{ bin_dir }}/helm upgrade --install ks-openpitrix
    {{ kubesphere_dir }}/openpitrix/openpitrix
    -f {{ kubesphere_dir }}/openpitrix/custom-values-openpitrix.yaml
    --namespace openpitrix-system
    --force
  register: deploy_result
  until: deploy_result is succeeded
  retries: 3
  delay: 10
  when:
    - (op_check.stdout.find("DEPLOYED") == -1) or (op_check.stdout.find("v0.4.8") == -1)


- name: OpenPitrix | Checking release job
  command: >
    {{ bin_dir }}/kubectl get job -n openpitrix-system
  register: op_jobs
  ignore_errors: True

- name: OpenPitrix | Creating release job
  command: >
    {{ bin_dir }}/kubectl apply -f {{ kubesphere_dir }}/openpitrix/openpitrix-release-app-job.yaml --force
  register: source_state
  failed_when: "source_state.stderr and 'AlreadyExists' not in source_state.stderr"
  when:
    - op_jobs.stdout.find("hyperpitrix-release-app-job") == -1

- name: OpenPitrix | Checking generate job
  command: >
    {{ bin_dir }}/kubectl get job -n openpitrix-system
  register: op_jobs
  ignore_errors: True

- name: OpenPitrix | Creating generate job
  command: >
    {{ bin_dir }}/kubectl apply -f {{ kubesphere_dir }}/openpitrix/hyperpitrix-generate-kubeconfig-job.yaml --force
  register: source_state
  failed_when: "source_state.stderr and 'AlreadyExists' not in source_state.stderr"
  when:
    - op_jobs.stdout.find("hyperpitrix-generate-kubeconfig-job") == -1

- name: OpenPitrix | import openpitrix status
  shell: >
    {{ bin_dir }}/kubectl patch cc ks-installer
    --type merge
    -p '{"status": {"openpitrix": {"status": "enabled", "enabledTime": "{{ lookup('pipe','date  +%Y-%m-%dT%H:%M:%S%Z') }}"}}}'
    -n kubesphere-system
  register: import
  failed_when: "import.stderr and 'Warning' not in import.stderr"
  until: import is succeeded
  retries: 5
  delay: 3
