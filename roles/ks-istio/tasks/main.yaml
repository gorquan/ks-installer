---

- name: istio | Getting istio installation files
  copy:
    src: "{{ item }}"
    dest: "{{ kubesphere_dir }}/"
  loop:
    - "istio"


- name: istio | Creating manifests
  template:
    src: "{{ item.file }}.j2"
    dest: "{{ kubesphere_dir }}/{{ item.path }}/{{ item.file }}"
  with_items:
    - { path: istio, file: custom-values-istio-init.yaml }
    - { path: istio, file: custom-values-istio.yaml }
    - { path: istio, file: custom-values-jaeger.yaml }
    - { path: istio, file: jaeger-production.yaml }


# label istio-system with istio-injection=disabled to avoid sidecarInjector mutatingwebhookconfigurations block pod creation
- name: istio | disable istio-injection
  shell: >
    {{ bin_dir }}/kubectl label ns {{ item }} istio-injection=disabled
  register: import
  failed_when: "import.stderr and 'already' not in import.stderr"
  loop:
    - istio-system
    - kube-system
    - kubesphere-system
    - kubesphere-devops-system
  ignore_errors: True

- name: istio | Check istio
  shell: >
    {{ bin_dir }}/helm list -n istio-system | grep "istio" 
  register: istio_check
  ignore_errors: True

- block:
    - name: KubeSphere | Init istio-system
      shell: >
        {{ bin_dir }}/helm upgrade --install istio-init {{ kubesphere_dir }}/istio/istio-init
        -f {{ kubesphere_dir }}/istio/custom-values-istio-init.yaml
        --namespace istio-system

    - name: istio | Waiting for istio-init-crd-10
      shell: "{{ bin_dir }}/kubectl -n istio-system get pod | grep istio-init-crd-10 | awk '{print $3}'"
      register: result
      until:
        - result.stdout.find("Completed") != -1
      retries: 90
      delay: 10


    - name: istio | Waiting for istio-init-crd-11
      shell: "{{ bin_dir }}/kubectl -n istio-system get pod | grep istio-init-crd-11 | awk '{print $3}'"
      register: result
      until:
        - result.stdout.find("Completed") != -1
      retries: 50
      delay: 10


    - name: istio | Waiting for istio-init-crd-12
      shell: "{{ bin_dir }}/kubectl -n istio-system get pod | grep istio-init-crd-12 | awk '{print $3}'"
      register: result
      until:
        - result.stdout.find("Completed") != -1
      retries: 50
      delay: 10


    - name: istio | Deploy istio
      shell: >
        {{ bin_dir }}/helm upgrade --install istio {{ kubesphere_dir }}/istio/istio
        -f {{ kubesphere_dir }}/istio/custom-values-istio.yaml
        --namespace istio-system
      register: istio_result
      ignore_errors: True

    - name: istio | Delete ValidatingWebhookConfiguration istio-galley
      shell: >
        {{ bin_dir }}/kubectl delete ValidatingWebhookConfiguration istio-galley
      when:
        - "istio_result.stderr and 'no matches for kind' in istio_result.stderr"

    - name: istio | Delete istio
      shell: >
        {{ bin_dir }}/helm del --purge istio
      when:
        - "istio_result.stderr and 'no matches for kind' in istio_result.stderr"

    - name: istio | Waiting for seconds
      wait_for: timeout=45
      when:
        - "istio_result.stderr and 'no matches for kind' in istio_result.stderr"

    - name: istio | Deploy istio
      shell: >
        {{ bin_dir }}/helm upgrade --install istio {{ kubesphere_dir }}/istio/istio
        -f {{ kubesphere_dir }}/istio/custom-values-istio.yaml
        --namespace istio-system
        --force
      register: istio_result
      ignore_errors: True
      when:
        - "istio_result.stderr and 'no matches for kind' in istio_result.stderr"

    - name: istio | Waiting for seconds
      wait_for: timeout=30
      when:
        - istio_result.stderr is defined
        - "istio_result.stderr and 'admitpilot?timeout' in istio_result.stderr"

    - name: istio | Delete ValidatingWebhookConfiguration istio-galley
      shell: >
        {{ bin_dir }}/kubectl delete ValidatingWebhookConfiguration istio-galley
      when:
        - istio_result.stderr is defined
        - "istio_result.stderr and 'admitpilot?timeout' in istio_result.stderr"

    - name: istio | Delete istio
      shell: >
        {{ bin_dir }}/helm del --purge istio
      when:
        - istio_result.stderr is defined
        - "istio_result.stderr and 'admitpilot?timeout' in istio_result.stderr"

    - name: istio | Waiting for seconds
      wait_for: timeout=45
      when:
        - istio_result.stderr is defined
        - "istio_result.stderr and 'admitpilot?timeout' in istio_result.stderr"

    - name: istio | Deploy istio
      shell: >
        {{ bin_dir }}/helm upgrade --install istio {{ kubesphere_dir }}/istio/istio
        -f {{ kubesphere_dir }}/istio/custom-values-istio.yaml
        --namespace istio-system
        --force
      register: istio_result
      when:
        - istio_result.stderr is defined
        - "istio_result.stderr and 'admitpilot?timeout' in istio_result.stderr"

    - fail:
        msg: "{{ istio_result.stderr }}"
      when:
        - istio_result.stderr is defined
        - istio_result.stderr != ""
        - istio_result.stderr.find("no matches for kind") == -1
        - istio_result.stderr.find("error copying from") == -1

    
    - name: istio | Check istio
      shell: >
        {{ bin_dir }}/helm list -n istio-system | grep "jaeger-operator"
      register: jaeger_check
      ignore_errors: True

    - name: istio | Delete jaeger-operator deployment
      shell: >
        {{ bin_dir }}/kubectl delete deploy -n istio-system jaeger-operator --cascade=false
      when:
        - (jaeger_check.stdout.find("deployed") != -1) and (jaeger_check.stdout.find("1.17.1") == -1)

    - name: istio | Deploy jaeger-operator
      shell: >
        {{ bin_dir }}/helm upgrade --install jaeger-operator {{ kubesphere_dir }}/istio/jaeger-operator
        -f {{ kubesphere_dir }}/istio/custom-values-jaeger.yaml
        --namespace istio-system
      when:
        - (jaeger_check.stdout.find("deployed") == -1) or (jaeger_check.stdout.find("1.17.1") == -1)

    - name: istio | Deploy jaeger-production
      shell: "{{ bin_dir }}/kubectl apply -f {{ kubesphere_dir }}/istio/jaeger-production.yaml --namespace istio-system"
      register: import
      until: import is succeeded
      retries: 5
      delay: 10
      when:
        - (jaeger_check.stdout.find("deployed") == -1) or (jaeger_check.stdout.find("1.17.1") == -1)

    - name: istio | Create jaeger operator service
      shell: "{{ bin_dir }}/kubectl apply -f {{ kubesphere_dir }}/istio/jaeger-operator-service.yaml --namespace istio-system"
      register: import
      until: import is succeeded
      retries: 5
      delay: 10
      when:
        - (jaeger_check.stdout.find("deployed") == -1) or (jaeger_check.stdout.find("1.17.1") == -1)
  when:
    - (istio_check.stdout.find("DEPLOYED") == -1) or (istio_check.stdout.find("1.4.8") == -1)

- name: servicemesh | import servicemesh status
  shell: >
    {{ bin_dir }}/kubectl patch cc ks-installer
    --type merge
    -p '{"status": {"servicemesh": {"status": "enabled", "enabledTime": "{{ lookup('pipe','date  +%Y-%m-%dT%H:%M:%S%Z') }}"}}}'
    -n kubesphere-system
  register: import
  failed_when: "import.stderr and 'Warning' not in import.stderr"
  until: import is succeeded
  retries: 5
  delay: 3


